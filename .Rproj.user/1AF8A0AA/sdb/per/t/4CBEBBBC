{
    "collab_server" : "",
    "contents" : "# setup and packages\npacman::p_load(\n  'devtools', 'purrr', 'dplyr', 'htmlwidgets',\n  'stringr', 'rvest', 'xml2', 'htmltools', 'leaflet', cartogram,\n  maptools, broom, ggplot2, ggmap, EE)\nsource('./code/process_shapes.R')\nsource('./code/process_votes.R')\n\nshp_data <- data.frame(name = names_shp) %>% merge(raw_votes, by.x = 'name', by.y = 'Area')\nshp_data$Result <- with(shp_data, ifelse(Remain > Leave, 'Remain', 'Leave')) %>% as.factor\ntable(shp_data$Result)\n\n\ntest <- auth_shp %>% merge(raw_votes, by.x = 'LAD12NM', by.y = 'Area')\ntest$Result <- ifelse(test$Remain > test$Leave, 'Remain', 'Leave') %>% as.factor\ncols <- c('#cc0000', '#009933')\nplot(test, col = cols[test$Result])\n\n\n# Before running the following line, if encounter this error\n# Error: isTRUE(gpclibPermitStatus()) is not TRUE\n# on Windows, make sure Rtools is installed, then install package gpclib\n# install.packages('gpclib', type = 'source')\n# To verify everything is fine, run\n# gpclibPermitStatus()\n# gpclibPermit()\n# If all True then continue\n\n# ggplot of hexagons ----\ntest_f <- test %>% tidy(region = \"LAD12NM\")\nstr(as.factor(test_f$id))\ntest_f1 <- test_f %>%\n  left_join(data.frame(id = as.character(test$LAD12NM), Result = as.factor(test$Result), stringsAsFactors = F))\nggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +\n  geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, fill = Result))\n\n\n# Cartogram ----\n# install_github(\"omegahat/Rcartogram\")\n# install_github('chrisbrunsdon/getcartr', subdir='getcartr')\ncarto <- cartogram(test, 'Valid_Votes')\nplot(carto, col = cols[test$Result])\npng('./output/brexit1.png')\nplot(carto, col = cols[test$Result])\ndev.off()\n\ntest_f_cart <- carto %>% tidy(region = 'LAD12NM')\ntest_f_cart1 <- test_f_cart %>%\n  left_join(data.frame(id = as.character(test$LAD12NM), Result = as.factor(test$Result), stringsAsFactors = F))\npng('./output/brexit2.png')\nggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +\n  geom_polygon(data = test_f_cart1, aes(x = long, y = lat, group = id, fill = Result, colour = Result))\ndev.off()\n\n\n\n# normal shape ====\nauth_data <- auth_1 %>% merge(raw_votes, by.x = 'lad16nm', by.y = 'Area')\nauth_data$Result <- ifelse(auth_data$Remain > auth_data$Leave, 'Remain', 'Leave')\n# proj4string(auth_data) <- ee_get_const()$wgs84\nauth_data@proj4string <- CRS(as.character(NA))\nauth_data@proj4string <- ee_get_const()$wgs84\ncarto1 <- cartogram(auth_data, 'Valid_Votes')\nplot(carto1)\ncarto2 <- carto1 %>% fortify(region = 'Region')\n# ggplot()  + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +\n#   geom_polygon(data = carto1, aes(x = long, y = lat, group = id, fill = as.factor(Result), colour = as.factor(Result)))\n# doesn't work because fortifying doesn't work with small shapes?\n# Error in RGEOSBinTopoFunc(spgeom1, spgeom2, byid, id, drop_lower_td, unaryUnion_if_byid_false,  : \n# TopologyException: Input geom 1 is invalid: Self-intersection at or near point 0.9290865878767145 51.887877493086037 at 0.9290865878767145 51.887877493086037\n\n\n# Try leaflet ====\nepsg4326 <- leafletCRS(\n  crsClass = 'L.Proj.CRS',\n  code = 'EPSG:4326',\n  proj4def = '+init=epsg:4326 +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0',\n  resolutions = 2^(16:7))\n\n\ncols <- c('#800000', '#006622')\nlabels1 <- sprintf(\n  '<strong>%s</strong><br/>Remain: %s (%.0f%%)<br/>Leave: %s (%.0f%%)',\n  carto1$lad16nm,\n  prettyNum(carto1$Remain, big.mark = ','), 100 * carto1$Remain / carto1$Valid_Votes,\n  prettyNum(carto1$Leave, big.mark = ','), 100 * carto1$Leave / carto1$Valid_Votes\n) %>% lapply(htmltools::HTML)\n\nleaflet(carto1, options = leafletOptions(crs = epsg4326)) %>%\n  addPolygons(\n    color = \"#444444\", weight = 1, smoothFactor = 0.5,\n    label = labels1,\n    opacity = 1.0, fillOpacity = 0.5, fillColor = cols[as.factor(carto1$Result)],\n    highlightOptions = highlightOptions(color = \"white\", weight = 2, bringToFront = TRUE))\n\n\n\n# Try leaflet with the hexagon map ====\ntest$Valid_Votes_sq <- test$Valid_Votes ^ 2\ncarto_x <- cartogram(test, 'Valid_Votes_sq')\ntmp <- data.frame(\n  remain = carto_x$Remain,\n  leave = carto_x$Leave,\n  tot = carto_x$Remain + carto_x$Leave,\n  valid = carto_x$Valid_Votes) %>%\n  mutate(ratio = tot / valid - 1)\ncarto_x$fill_op <- abs(carto_x$Pct_Remain - 50) / max(abs(carto_x$Pct_Remain - 50))\nlabels2 <- sprintf(\n  '<strong>%s</strong><br/>Remain: %s (%.0f%%)<br/>Leave: %s (%.0f%%)',\n  carto$LAD12NM,\n  prettyNum(carto$Remain, big.mark = ','), 100 * carto$Remain / carto$Valid_Votes,\n  prettyNum(carto$Leave, big.mark = ','), 100 * carto$Leave / carto$Valid_Votes\n) %>% lapply(htmltools::HTML)\n\nleaflet(carto_x, options = leafletOptions(crs = epsg4326)) %>%\n  addPolygons(\n    color = \"#444444\", weight = 1, smoothFactor = 0.5,\n    label = labels2,\n    opacity = 1.0, fillOpacity = carto_x$fill_op, fillColor = cols[as.factor(carto_x$Result)],\n    highlightOptions = highlightOptions(color = \"white\", weight = 2, bringToFront = TRUE))",
    "created" : 1488620164434.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2347926213",
    "id" : "4CBEBBBC",
    "lastKnownWriteTime" : 1488923089,
    "last_content_update" : 1488923089341,
    "path" : "C:/Users/Xinye/Dropbox/programming/brexit/code/plot_maps.R",
    "project_path" : "code/plot_maps.R",
    "properties" : {
        "marks" : "<:114,4\n>:119,4",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}