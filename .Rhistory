auth_shp$Data
names(auth_shp)
names(shp_data)
test <- auth_shp %>% merge(raw_votes, by.x = 'LAD12NM', by.y = 'Area')
head(test)
summary(test)
test$Result <- with(test, ifelse(Remain > Leave, 'Remain', 'Leave')) %>% as.factor
test$Remain %>% head
test$Result <- ifelse(test$Remain > test$Leave, 'Remain', 'Leave') %>% as.factor
cols <- c('#cc0000', '#009933')
plot(test, col = cols[test$Result])
pacman::p_load(ggmap)
names(test)
heat(test)
head(test)
table(test$Region_Code)
test %>% fortify(region = 'Region_Code')
pacman::p_load(ggmap, maptools)
test_f <- test %>% fortify(region = 'Region_Code')
pacman::p_load(ggmap, maptools, gpclib)
install.packages("gpclib", type = "source")
test_f <- test %>% fortify()
pacman::p_load(ggmap, maptools, broom)
test_f1 <- test %>% tidy
head(test_f1)
View(test_f1)
head(test)
test_f1 <- test %>% tidy(region = 'Region_Code')
?fortify
?tidy
test_f <- test %>% tidy(region = 'Region_Code')
head(test_f)
head(test)
test_f <- test %>% tidy(region = 'LAD12NM')
head(as.data.frame(test))
summary(test$id)
test_f1 <- test_f %>%
left_join(data.frame(id = test$id, result = as.factor(test$Result)))
test_f1 <- test_f %>%
left_join(data.frame(id = as.numeric(test$id), result = as.factor(test$Result)))
head(test_f)
str(test_f)
test_f <- test %>% tidy(region = 'LAD12NM')
test_f1 <- test_f %>%
left_join(data.frame(id = as.character(test$id), result = as.factor(test$Result)))
test_f1 <- test_f %>%
left_join(data.frame(id = as.factor(test$id), result = as.factor(test$Result)))
str(test)
str(test$id)
str(test_)
str(test_f)
test_f1 <- test_f %>%
left_join(data.frame(id = as.charater(test$id), result = as.factor(test$Result)))
test_f1 <- test_f %>%
left_join(data.frame(id = as.character(test$id), result = as.factor(test$Result)))
str(test_F)
str(test_f)
str(data.frame(id = as.character(test$id), result = as.factor(test$Result)))
test_f1 <- test_f %>%
left_join(data.frame(id = as.character(test$id), result = as.factor(test$Result), stringsAsFactors = F))
head(test_f1)
test_f <- test %>% tidy(region = 'LAD12NM')
test_f <- test %>% tidy()
str(test_f)
str(as.factor(test_f$id))
View(test_f)
test_f <- test %>% tidy(region = "GEO_ID")
names(test)
install.packages(c("backports", "chron", "digest", "forecast", "jsonlite", "mvtnorm", "NLP", "party", "Rcpp", "RcppArmadillo", "rprojroot", "RSQLite", "stringr", "TH.data", "tidyr", "tm", "topicmodels", "tseries", "xml2"))
names(test)
test_f <- test %>% tidy(region = "Region")
pacman::p_load(rgdal, raster)
pacman::p_load(
'devtools', 'purrr', 'dplyr', 'htmlwidgets',
'stringr', 'rvest', 'xml2', 'htmltools', 'leaflet')
test_f <- test %>% tidy(region = "Region")
pacman::p_load(ggmap, maptools, broom)
test_f <- test %>% tidy(region = "Region")
isTRUE(gpclibPermitStatus())
install.packages("gpclib")
install.packages("gpclib")
test_f <- test %>% tidy(region = "Region")
library(maptools)
test_f <- test %>% tidy(region = "Region")
gpclibPermit()
gpclibPermitStatus()
test_f <- test %>% tidy(region = "Region")
str(test_f)
head(test)
test_f <- test %>% tidy(region = "LAD12NM")
head(test)
str(test_f)
View(test_f)
str(test)
head(test)
test_f1 <- test_f %>%
left_join(data.frame(id = test$LAD12NM), result = as.factor(test$Result), stringsAsFactors = F)
str(test_f)
str(test$LAD12NM)
test_f1 <- test_f %>%
left_join(data.frame(id = as.character(test$LAD12NM)), result = as.factor(test$Result), stringsAsFactors = F)
test_f1 <- test_f %>%
left_join(data.frame(id = as.character(test$LAD12NM), result = as.factor(test$Result), stringsAsFactors = F))
head(test_f1)
ggplot() +
geom_polygon(aes(x = long, y = lat, group = id, colour = result))
ggplot() +
geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, colour = result))
ggplot() +
geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, fill = result))
ggplot() + theme_bw() +
geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, fill = result))
ggplot() + theme_bw() + coord_map() +
geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, fill = result))
ggplot() + theme_bw() + theme_nothing(legend = TRUE) +
geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, fill = result))
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, fill = result))
test_f1 <- test_f %>%
left_join(data.frame(id = as.character(test$LAD12NM), Result = as.factor(test$Result), stringsAsFactors = F))
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, fill = result))
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, fill = Result))
View(raw_votes)
install_github("omegahat/Rcartogram")
install_github('chrisbrunsdon/getcartr', subdir='getcartr')
install.packages('cartogram')
library(cartogram)
?cartogram
install_github("omegahat/Rcartogram")
table(shp_data$Result)
carto <- cartogram(test, test$Valid_Votes)
head(test$Valid_Votes)
wts <- test$Valid_Votes
carto <- cartogram(test, wts)
carto <- cartogram(test, 'Valid_Votes')
wts <- test$Valid_Votes / max(test$Valid_Votes)
test$wts <- test$Valid_Votes / max(test$Valid_Votes)
carto <- cartogram(test, 'wts',)
carto <- cartogram(test, 'wts')
plot(carto)
head(test_f1)
plot(carto, col = cols[test$Result]))
plot(carto, col = cols[test$Result])
png('./output/brexit1.png')
plot(carto, col = cols[test$Result])
dev.close()
png('./output/brexit1.png')
plot(carto, col = cols[test$Result])
dev.off()
test_f_cart1 <- test_f_cart %>%
left_join(data.frame(id = as.character(test$LAD12NM), Result = as.factor(test$Result), stringsAsFactors = F))
test_f_cart <- carto %>% tidy(region = 'LAD12NM')
test_f_cart1 <- test_f_cart %>%
left_join(data.frame(id = as.character(test$LAD12NM), Result = as.factor(test$Result), stringsAsFactors = F))
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f_cart1, aes(x = long, y = lat, group = id, fill = Result))
png('./output/brexit2.png')
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f_cart1, aes(x = long, y = lat, group = id, fill = Result))
dev.off()
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f_cart1, aes(x = long, y = lat, group = id, fill = Result, colours = Result))
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f_cart1, aes(x = long, y = lat, group = id, fill = Result, colours = Result))
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f_cart1, aes(x = long, y = lat, group = id, fill = Result, colour = Result))
png('./output/brexit2.png')
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f_cart1, aes(x = long, y = lat, group = id, fill = Result, colour = Result))
dev.off()
auth_1 <- readOGR('./data/Local_Authority_Districts_December_2016_Ultra_Generalised_Clipped_Boundaries_in_Great_Britain',
layer = 'Local_Authority_Districts_December_2016_Ultra_Generalised_Clipped_Boundaries_in_Great_Britain')
summary(auth_1)
auth_data <- auth_1 %>% merge(raw_votes, by.x = 'lad16nm', by.y = 'Area') %>%
mutate(result = ifelse(Remain > Leave, 'Remain', 'Leave')) %>%
as.factor
auth_data$Result <- with(auth_data, Result = ifelse(Remain > Leave, 'Remain', 'Leave')) %>%
as.factor
auth_data <- auth_1 %>% merge(raw_votes, by.x = 'lad16nm', by.y = 'Area')
auth_data$Result <- with(auth_data, Result = ifelse(Remain > Leave, 'Remain', 'Leave')) %>%
as.factor
auth_data$Result <- with(auth_data, ifelse(Remain > Leave, 'Remain', 'Leave')) %>%
as.factor
head(auth_data)
auth_data$Result <- with(auth_data, ifelse(Remain > Leave, 'Remain', 'Leave'))
plot(auth_data)
class(auth_data)
auth_data$Remain %>% head
auth_data$Result <- ifelse(auth_data$Remain > auth_data$Leave, 'Remain', 'Leave'))
auth_data$Result <- ifelse(auth_data$Remain > auth_data$Leave, 'Remain', 'Leave')
carto1 <- cartogram(auth_data, 'Valid_Votes')
warnings()
proj4string(auth_data)
plot(carto1)
auth_data$long %>% head
proj4string(auth_data) <- CRS("+init=epsg:27700")
auth_data <- auth_1 %>% merge(raw_votes, by.x = 'lad16nm', by.y = 'Area')
auth_data$Result <- ifelse(auth_data$Remain > auth_data$Leave, 'Remain', 'Leave')
carto1 <- cartogram(auth_data, 'Valid_Votes', maxiter = 2)
carto1 <- cartogram(auth_data, 'Valid_Votes', itermax = 2)
plot(carto1)
proj4string(auth_data) <- CRS("+init=epsg:3395")
carto1 <- cartogram(auth_data, 'Valid_Votes', itermax = 2)
proj4string(auth_data) <- CRS("+init=epsg:27700")
carto1 <- cartogram(auth_data, 'Valid_Votes')
plot(carto1)
plot(auth_data)
proj4string(auth_data) <- CRS("+init=epsg:3395")
plot(auth_data)
proj4string(auth_data)
proj4string(auth_data) <- CRS("+init=epsg:4326")
plot(auth_data)
carto1 <- cartogram(auth_data, 'Valid_Votes')
plot(carto1)
warnings()
install.packages('C:/Users/Xinye/Dropbox/work/EE/r_package/dev/EE_0.0.0.9203.tar.gz', repo = NULL, type = 'source')
?EE
library(EE)
?e
?EE
ee_get_const
proj4string(auth_data) <- ee_get_const()$wgs84
plot(carto1)
plot(auth_data)
auth_data1 <- spTransform(auth_data, ee_get_const()$wgs84)
plot(auth_data1)
carto1 <- cartogram(auth_data1, 'Valid_Votes')
plot(carto1)
auth_data$proj4string <- CRS(as.character(NA))
plot(auth_data)
carto1 <- cartogram(auth_data, 'Valid_Votes')
plot(carto1)
auth_data@proj4string <- CRS(as.character(NA))
carto1 <- cartogram(auth_data, 'Valid_Votes')
plot(carto1)
names(auth_1)
names(auth_1)
names(auth_data)
carto1_joined <- carto1 %>%
left_join(
data.frame(id = as.character(auth_data$lad16nm), Result = as.factor(auth_data$Result), stringsAsFactors = F))
names(carto1)
ggplot()  + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = carto1, aes(x = long, y = lat, group = id, fill = Result, colour = Result))
names(caro1)
names(carto1)
head(carto1)
ggplot()  + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = carto1, aes(x = long, y = lat, group = id, fill = Result, colour = Result))
str(carto1)
str(carto1$Result)
ggplot()  + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = carto1, aes(x = long, y = lat, group = id, fill = as.factor(Result), colour = as.factor(Result)))
head(carto1)
carto2 <- carto1 %>% fortify(region = 'Region')
warnings()
plot(carto1)
leaflet(carto1) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = as.factor(Result),
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
leaflet(carto1) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
# Try leaflet ====
leaflet(carto1) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = "YlOrRd",
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
plot(carto1)
# Try leaflet ====
leaflet(carto1) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = "YlOrRd",
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
leaflet(carto1) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, fillColor = cols[Result],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
leaflet(carto1) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, fillColor = cols[carto1$Result],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
cols
leaflet(carto1) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, fill = cols[carto1$Result],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
# Try leaflet ====
leaflet(carto1) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, fillColor = cols[as.factor(carto1$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
leaflet(auth_data) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, fillColor = cols[as.factor(carto1$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
leaflet(auth_data) %>%
addPolygons(
color = "#444444", weight = carto1$Valid_Votes, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5, fillColor = cols[as.factor(carto1$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
setup and packages
pacman::p_load(
'devtools', 'purrr', 'dplyr', 'htmlwidgets',
'stringr', 'rvest', 'xml2', 'htmltools', 'leaflet', cartogram,
maptools, broom, ggplot2, ggmap, EE)
source('./code/process_shapes.R')
source('./code/process_votes.R')
shp_data <- data.frame(name = names_shp) %>% merge(raw_votes, by.x = 'name', by.y = 'Area')
shp_data$Result <- with(shp_data, ifelse(Remain > Leave, 'Remain', 'Leave')) %>% as.factor
table(shp_data$Result)
test <- auth_shp %>% merge(raw_votes, by.x = 'LAD12NM', by.y = 'Area')
test$Result <- ifelse(test$Remain > test$Leave, 'Remain', 'Leave') %>% as.factor
cols <- c('#cc0000', '#009933')
plot(test, col = cols[test$Result])
# Before running the following line, if encounter this error
# Error: isTRUE(gpclibPermitStatus()) is not TRUE
# on Windows, make sure Rtools is installed, then install package gpclib
# install.packages('gpclib', type = 'source')
# To verify everything is fine, run
# gpclibPermitStatus()
# gpclibPermit()
# If all True then continue
# ggplot of hexagons ----
test_f <- test %>% tidy(region = "LAD12NM")
str(as.factor(test_f$id))
test_f1 <- test_f %>%
left_join(data.frame(id = as.character(test$LAD12NM), Result = as.factor(test$Result), stringsAsFactors = F))
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f1, aes(x = long, y = lat, group = id, fill = Result))
# Cartogram ----
# install_github("omegahat/Rcartogram")
# install_github('chrisbrunsdon/getcartr', subdir='getcartr')
carto <- cartogram(test, 'Valid_Votes')
plot(carto, col = cols[test$Result])
test_f_cart <- carto %>% tidy(region = 'LAD12NM')
test_f_cart1 <- test_f_cart %>%
left_join(data.frame(id = as.character(test$LAD12NM), Result = as.factor(test$Result), stringsAsFactors = F))
ggplot() + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = test_f_cart1, aes(x = long, y = lat, group = id, fill = Result, colour = Result))
auth_data <- auth_1 %>% merge(raw_votes, by.x = 'lad16nm', by.y = 'Area')
auth_data$Result <- ifelse(auth_data$Remain > auth_data$Leave, 'Remain', 'Leave')
# proj4string(auth_data) <- ee_get_const()$wgs84
auth_data@proj4string <- CRS(as.character(NA))
auth_data@proj4string <- ee_get_const()$wgs84
carto1 <- cartogram(auth_data, 'Valid_Votes')
plot(carto1)
carto2 <- carto1 %>% fortify(region = 'Region')
ggplot()  + theme_bw() + theme_nothing(legend = TRUE) + coord_fixed() +
geom_polygon(data = carto1, aes(x = long, y = lat, group = id, fill = as.factor(Result), colour = as.factor(Result)))
# doesn't work because fortifying doesn't work with small shapes?
# Error in RGEOSBinTopoFunc(spgeom1, spgeom2, byid, id, drop_lower_td, unaryUnion_if_byid_false,  :
# TopologyException: Input geom 1 is invalid: Self-intersection at or near point 0.9290865878767145 51.887877493086037 at 0.9290865878767145 51.887877493086037
labels2 <- sprintf(
'<strong>%s</strong><br/>Remain: %s (%.0f%%)<br/>Leave: %s (%.0f%%)',
carto$LAD12NM,
prettyNum(carto$Remain, big.mark = ','), 100 * carto$Remain / carto$Valid_Votes,
prettyNum(carto$Leave, big.mark = ','), 100 * carto$Leave / carto$Valid_Votes
) %>% lapply(htmltools::HTML)
cols <- c('#cc0000', '#009933')
labels1 <- sprintf(
'<strong>%s</strong><br/>Remain: %s (%.0f%%)<br/>Leave: %s (%.0f%%)',
carto1$lad16nm,
prettyNum(carto1$Remain, big.mark = ','), 100 * carto1$Remain / carto1$Valid_Votes,
prettyNum(carto1$Leave, big.mark = ','), 100 * carto1$Leave / carto1$Valid_Votes
) %>% lapply(htmltools::HTML)
epsg4326 <- leafletCRS(
crsClass = 'L.Proj.CRS',
code = 'EPSG:4326',
proj4def = '+init=epsg:4326 +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0',
resolutions = 2^(16:7))
cols <- c('#cc0000', '#009933')
labels1 <- sprintf(
'<strong>%s</strong><br/>Remain: %s (%.0f%%)<br/>Leave: %s (%.0f%%)',
carto1$lad16nm,
prettyNum(carto1$Remain, big.mark = ','), 100 * carto1$Remain / carto1$Valid_Votes,
prettyNum(carto1$Leave, big.mark = ','), 100 * carto1$Leave / carto1$Valid_Votes
) %>% lapply(htmltools::HTML)
labels2 <- sprintf(
'<strong>%s</strong><br/>Remain: %s (%.0f%%)<br/>Leave: %s (%.0f%%)',
carto$LAD12NM,
prettyNum(carto$Remain, big.mark = ','), 100 * carto$Remain / carto$Valid_Votes,
prettyNum(carto$Leave, big.mark = ','), 100 * carto$Leave / carto$Valid_Votes
) %>% lapply(htmltools::HTML)
leaflet(carto, options = leafletOptions(crs = epsg4326)) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
label = labels2,
opacity = 1.0, fillOpacity = 0.5, fillColor = cols[as.factor(carto$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
carto$Valid_Votes_sq <- carto$Valid_Votes ^ 2
carto$Valid_Votes_sq <- carto$Valid_Votes ^ 2
carto_x <- cartogram(test, 'Valid_Votes_sq')
labels2 <- sprintf(
'<strong>%s</strong><br/>Remain: %s (%.0f%%)<br/>Leave: %s (%.0f%%)',
carto$LAD12NM,
prettyNum(carto$Remain, big.mark = ','), 100 * carto$Remain / carto$Valid_Votes,
prettyNum(carto$Leave, big.mark = ','), 100 * carto$Leave / carto$Valid_Votes
) %>% lapply(htmltools::HTML)
leaflet(carto_x, options = leafletOptions(crs = epsg4326)) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
label = labels2,
opacity = 1.0, fillOpacity = 0.5, fillColor = cols[as.factor(carto$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
carto$Valid_Votes_sq <- carto$Valid_Votes ^ 2
carto_x <- cartogram(test, 'Valid_Votes_sq')
test$Valid_Votes_sq <- test$Valid_Votes ^ 2
carto_x <- cartogram(test, 'Valid_Votes_sq')
leaflet(carto_x, options = leafletOptions(crs = epsg4326)) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
label = labels2,
opacity = 1.0, fillOpacity = 0.5, fillColor = cols[as.factor(carto$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
carto_x$fill_op <- (carto_x$Remain / sum(carto_x$Remain, carto_x$Leave) - .5) / .5
carto_x$fill_op %>% hist
carto_x$fill_op <- abs(carto_x$Remain / sum(carto_x$Remain, carto_x$Leave) - .5) / .5
carto_x$fill_op %>% hist
leaflet(carto_x, options = leafletOptions(crs = epsg4326)) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
label = labels2,
opacity = 1.0, fillOpacity = carto_x$fill_op, fillColor = cols[as.factor(carto_x$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
View(carto_x)
carto_x$Remain / sum(carto_x$Remain, carto_x$Leave) %>% hist
(carto_x$Remain / sum(carto_x$Remain, carto_x$Leave)) %>% hist
(sum(carto_x$Remain, carto_x$Leave) == carto_x$Valid_Votes) %>% table
((sum(carto_x$Remain, carto_x$Leave) / carto_x$Valid_Votes) - 1) %>% hist
tmp <- data.frame(
remain = carto_x$Remain,
leave = carto_x$Leave,
valid = carto_x$Valid_Votes)
tmp <- data.frame(
remain = carto_x$Remain,
leave = carto_x$Leave,
tot = carto_x$Remain + carto_x$Leave,
valid = carto_x$Valid_Votes)
View(tmp)
tmp <- data.frame(
remain = carto_x$Remain,
leave = carto_x$Leave,
tot = carto_x$Remain + carto_x$Leave,
valid = carto_x$Valid_Votes) %>%
mutate(ratio = tot / valid - 1)
tmp <- data.frame(
remain = carto_x$Remain,
leave = carto_x$Leave,
tot = sum(carto_x$Remain, carto_x$Leave),
valid = carto_x$Valid_Votes) %>%
mutate(ratio = tot / valid - 1)
carto_x$fill_op <- abs(carto_x$Remain / (carto_x$Remain + carto_x$Leave) - .5) / .5
carto_x$fill_op <- abs(carto_x$Remain / (carto_x$Remain + carto_x$Leave) - .5) / .5
source('C:/Users/Xinye/Dropbox/programming/brexit/code/plot_maps.R', echo=TRUE)
leaflet(carto_x, options = leafletOptions(crs = epsg4326)) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
label = labels2,
opacity = 1.0, fillOpacity = carto_x$fill_op, fillColor = cols[as.factor(carto_x$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
hist(carto_x$fill_op)
cols <- c('#800000', '#006622')
leaflet(carto_x, options = leafletOptions(crs = epsg4326)) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
label = labels2,
opacity = 1.0, fillOpacity = carto_x$fill_op, fillColor = cols[as.factor(carto_x$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
cols
hist(carto_x$fill_op)
carto_x$fill_op <- abs(carto_x$Remain / (carto_x$Remain + carto_x$Leave) - .5)
leaflet(carto_x, options = leafletOptions(crs = epsg4326)) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
label = labels2,
opacity = 1.0, fillOpacity = carto_x$fill_op, fillColor = cols[as.factor(carto_x$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
hist(carto_x$fill_op)
carto_x$fill_op <- abs(carto_x$Pct_Remain - 50) / max(abs(carto_x$Pct_Remain))
leaflet(carto_x, options = leafletOptions(crs = epsg4326)) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
label = labels2,
opacity = 1.0, fillOpacity = carto_x$fill_op, fillColor = cols[as.factor(carto_x$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
hist(carto_x$fill_op)
carto_x$fill_op <- abs(carto_x$Pct_Remain - 50) / max(abs(carto_x$Pct_Remain - 50))
hist(carto_x$fill_op)
leaflet(carto_x, options = leafletOptions(crs = epsg4326)) %>%
addPolygons(
color = "#444444", weight = 1, smoothFactor = 0.5,
label = labels2,
opacity = 1.0, fillOpacity = carto_x$fill_op, fillColor = cols[as.factor(carto_x$Result)],
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE))
